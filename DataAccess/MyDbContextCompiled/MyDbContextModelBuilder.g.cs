// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Update.Internal;

#pragma warning disable 219, 612, 618
#nullable disable

namespace DataAccess.MyDbContextCompiled
{
    public partial class MyDbContextModel
    {
        private MyDbContextModel()
            : base(skipDetectChanges: false, modelId: new Guid("d679ee65-d5d8-4132-a210-096a1d95490e"), entityTypeCount: 1)
        {
        }

        partial void Initialize()
        {
            var myEntity = MyEntityEntityType.Create(this);

            MyEntityEntityType.CreateAnnotations(myEntity);

            AddAnnotation("ProductVersion", "9.0.8");
            AddRuntimeAnnotation("Relational:RelationalModelFactory", () => CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var myEntity = FindEntityType("DataAccess.Entities.MyEntity")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            myEntity.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var dataAccessEntitiesMyEntityTableBase = new TableBase("DataAccess.Entities.MyEntity", null, relationalModel);
            var createdTimestampColumnBase = new ColumnBase<ColumnMappingBase>("CreatedTimestamp", "TEXT", dataAccessEntitiesMyEntityTableBase);
            dataAccessEntitiesMyEntityTableBase.Columns.Add("CreatedTimestamp", createdTimestampColumnBase);
            var iDColumnBase = new ColumnBase<ColumnMappingBase>("ID", "TEXT", dataAccessEntitiesMyEntityTableBase);
            dataAccessEntitiesMyEntityTableBase.Columns.Add("ID", iDColumnBase);
            relationalModel.DefaultTables.Add("DataAccess.Entities.MyEntity", dataAccessEntitiesMyEntityTableBase);
            var dataAccessEntitiesMyEntityMappingBase = new TableMappingBase<ColumnMappingBase>(myEntity, dataAccessEntitiesMyEntityTableBase, null);
            dataAccessEntitiesMyEntityTableBase.AddTypeMapping(dataAccessEntitiesMyEntityMappingBase, false);
            defaultTableMappings.Add(dataAccessEntitiesMyEntityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)iDColumnBase, myEntity.FindProperty("ID")!, dataAccessEntitiesMyEntityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdTimestampColumnBase, myEntity.FindProperty("CreatedTimestamp")!, dataAccessEntitiesMyEntityMappingBase);

            var tableMappings = new List<TableMapping>();
            myEntity.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var myEntitiesTable = new Table("MyEntities", null, relationalModel);
            var iDColumn = new Column("ID", "TEXT", myEntitiesTable);
            myEntitiesTable.Columns.Add("ID", iDColumn);
            iDColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<Guid>(iDColumn);
            var createdTimestampColumn = new Column("CreatedTimestamp", "TEXT", myEntitiesTable);
            myEntitiesTable.Columns.Add("CreatedTimestamp", createdTimestampColumn);
            createdTimestampColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<DateTime>(createdTimestampColumn);
            relationalModel.Tables.Add(("MyEntities", null), myEntitiesTable);
            var myEntitiesTableMapping = new TableMapping(myEntity, myEntitiesTable, null);
            myEntitiesTable.AddTypeMapping(myEntitiesTableMapping, false);
            tableMappings.Add(myEntitiesTableMapping);
            RelationalModel.CreateColumnMapping(iDColumn, myEntity.FindProperty("ID")!, myEntitiesTableMapping);
            RelationalModel.CreateColumnMapping(createdTimestampColumn, myEntity.FindProperty("CreatedTimestamp")!, myEntitiesTableMapping);
            var pK_MyEntities = new UniqueConstraint("PK_MyEntities", myEntitiesTable, new[] { iDColumn });
            myEntitiesTable.PrimaryKey = pK_MyEntities;
            pK_MyEntities.SetRowKeyValueFactory(new SimpleRowKeyValueFactory<Guid>(pK_MyEntities));
            var pK_MyEntitiesKey = RelationalModel.GetKey(this,
                "DataAccess.Entities.MyEntity",
                new[] { "ID" });
            pK_MyEntities.MappedKeys.Add(pK_MyEntitiesKey);
            RelationalModel.GetOrCreateUniqueConstraints(pK_MyEntitiesKey).Add(pK_MyEntities);
            myEntitiesTable.UniqueConstraints.Add("PK_MyEntities", pK_MyEntities);
            return relationalModel.MakeReadOnly();
        }
    }
}
