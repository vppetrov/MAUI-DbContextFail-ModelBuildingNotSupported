// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using DataAccess.Entities;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.ChangeTracking.Internal;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal;
using Microsoft.EntityFrameworkCore.Storage;

#pragma warning disable 219, 612, 618
#nullable disable

namespace DataAccess.MyDbContextCompiled
{
    [EntityFrameworkInternal]
    public partial class MyEntityEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "DataAccess.Entities.MyEntity",
                typeof(MyEntity),
                baseEntityType,
                propertyCount: 2,
                keyCount: 1);

            var iD = runtimeEntityType.AddProperty(
                "ID",
                typeof(Guid),
                propertyInfo: typeof(MyEntity).GetProperty("ID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MyEntity).GetField("<ID>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            iD.SetGetter(
                Guid (MyEntity entity) => MyEntityUnsafeAccessors.ID(entity),
                bool (MyEntity entity) => MyEntityUnsafeAccessors.ID(entity) == new Guid("00000000-0000-0000-0000-000000000000"),
                Guid (MyEntity instance) => MyEntityUnsafeAccessors.ID(instance),
                bool (MyEntity instance) => MyEntityUnsafeAccessors.ID(instance) == new Guid("00000000-0000-0000-0000-000000000000"));
            iD.SetSetter(
                (MyEntity entity, Guid value) => MyEntityUnsafeAccessors.ID(entity) = value);
            iD.SetMaterializationSetter(
                (MyEntity entity, Guid value) => MyEntityUnsafeAccessors.ID(entity) = value);
            iD.SetAccessors(
                Guid (InternalEntityEntry entry) => (entry.FlaggedAsStoreGenerated(0) ? entry.ReadStoreGeneratedValue<Guid>(0) : (entry.FlaggedAsTemporary(0) && MyEntityUnsafeAccessors.ID(((MyEntity)(entry.Entity))) == new Guid("00000000-0000-0000-0000-000000000000") ? entry.ReadTemporaryValue<Guid>(0) : MyEntityUnsafeAccessors.ID(((MyEntity)(entry.Entity))))),
                Guid (InternalEntityEntry entry) => MyEntityUnsafeAccessors.ID(((MyEntity)(entry.Entity))),
                Guid (InternalEntityEntry entry) => entry.ReadOriginalValue<Guid>(iD, 0),
                Guid (InternalEntityEntry entry) => entry.ReadRelationshipSnapshotValue<Guid>(iD, 0),
                object (ValueBuffer valueBuffer) => valueBuffer[0]);
            iD.SetPropertyIndexes(
                index: 0,
                originalValueIndex: 0,
                shadowIndex: -1,
                relationshipIndex: 0,
                storeGenerationIndex: 0);
            iD.TypeMapping = SqliteGuidTypeMapping.Default;
            iD.SetCurrentValueComparer(new EntryCurrentValueComparer<Guid>(iD));

            var createdTimestamp = runtimeEntityType.AddProperty(
                "CreatedTimestamp",
                typeof(DateTime),
                propertyInfo: typeof(MyEntity).GetProperty("CreatedTimestamp", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MyEntity).GetField("<CreatedTimestamp>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));
            createdTimestamp.SetGetter(
                DateTime (MyEntity entity) => MyEntityUnsafeAccessors.CreatedTimestamp(entity),
                bool (MyEntity entity) => MyEntityUnsafeAccessors.CreatedTimestamp(entity) == default(DateTime),
                DateTime (MyEntity instance) => MyEntityUnsafeAccessors.CreatedTimestamp(instance),
                bool (MyEntity instance) => MyEntityUnsafeAccessors.CreatedTimestamp(instance) == default(DateTime));
            createdTimestamp.SetSetter(
                (MyEntity entity, DateTime value) => MyEntityUnsafeAccessors.CreatedTimestamp(entity) = value);
            createdTimestamp.SetMaterializationSetter(
                (MyEntity entity, DateTime value) => MyEntityUnsafeAccessors.CreatedTimestamp(entity) = value);
            createdTimestamp.SetAccessors(
                DateTime (InternalEntityEntry entry) => MyEntityUnsafeAccessors.CreatedTimestamp(((MyEntity)(entry.Entity))),
                DateTime (InternalEntityEntry entry) => MyEntityUnsafeAccessors.CreatedTimestamp(((MyEntity)(entry.Entity))),
                DateTime (InternalEntityEntry entry) => entry.ReadOriginalValue<DateTime>(createdTimestamp, 1),
                DateTime (InternalEntityEntry entry) => entry.GetCurrentValue<DateTime>(createdTimestamp),
                object (ValueBuffer valueBuffer) => valueBuffer[1]);
            createdTimestamp.SetPropertyIndexes(
                index: 1,
                originalValueIndex: 1,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            createdTimestamp.TypeMapping = SqliteDateTimeTypeMapping.Default;

            var key = runtimeEntityType.AddKey(
                new[] { iD });
            runtimeEntityType.SetPrimaryKey(key);

            return runtimeEntityType;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            var iD = runtimeEntityType.FindProperty("ID");
            var createdTimestamp = runtimeEntityType.FindProperty("CreatedTimestamp");
            var key = runtimeEntityType.FindKey(new[] { iD });
            key.SetPrincipalKeyValueFactory(KeyValueFactoryFactory.CreateSimpleNonNullableFactory<Guid>(key));
            key.SetIdentityMapFactory(IdentityMapFactoryFactory.CreateFactory<Guid>(key));
            runtimeEntityType.SetOriginalValuesFactory(
                ISnapshot (InternalEntityEntry source) =>
                {
                    var entity = ((MyEntity)(source.Entity));
                    return ((ISnapshot)(new Snapshot<Guid, DateTime>(((ValueComparer<Guid>)(((IProperty)iD).GetValueComparer())).Snapshot(source.GetCurrentValue<Guid>(iD)), ((ValueComparer<DateTime>)(((IProperty)createdTimestamp).GetValueComparer())).Snapshot(source.GetCurrentValue<DateTime>(createdTimestamp)))));
                });
            runtimeEntityType.SetStoreGeneratedValuesFactory(
                ISnapshot () => ((ISnapshot)(new Snapshot<Guid>(((ValueComparer<Guid>)(((IProperty)iD).GetValueComparer())).Snapshot(default(Guid))))));
            runtimeEntityType.SetTemporaryValuesFactory(
                ISnapshot (InternalEntityEntry source) => ((ISnapshot)(new Snapshot<Guid>(default(Guid)))));
            runtimeEntityType.SetShadowValuesFactory(
                ISnapshot (IDictionary<string, object> source) => Snapshot.Empty);
            runtimeEntityType.SetEmptyShadowValuesFactory(
                ISnapshot () => Snapshot.Empty);
            runtimeEntityType.SetRelationshipSnapshotFactory(
                ISnapshot (InternalEntityEntry source) =>
                {
                    var entity = ((MyEntity)(source.Entity));
                    return ((ISnapshot)(new Snapshot<Guid>(((ValueComparer<Guid>)(((IProperty)iD).GetKeyValueComparer())).Snapshot(source.GetCurrentValue<Guid>(iD)))));
                });
            runtimeEntityType.Counts = new PropertyCounts(
                propertyCount: 2,
                navigationCount: 0,
                complexPropertyCount: 0,
                originalValueCount: 2,
                shadowCount: 0,
                relationshipCount: 1,
                storeGeneratedCount: 1);
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "MyEntities");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
